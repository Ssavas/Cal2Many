/*
 * 	Autofocus calculation on single actor
 *  using complex number structure
 *  Süleyman Savas 
 *  2018-01-30
 *  School of ITE, HH
 * 
 */
 
//package autofocus_complex;
 
  
 actor autofocus_c () ==> :
	 
	int NOF_PIXELS_KERNEL = 36;
	int NOF_PIXELS        = 216;
	
	float complex_SquareRoot_ret;
	float SquareRoot_ret;
	int (size = 64) complex_p0_pos;
	int (size = 64) complex_p0_val;
	int (size = 64) complex_p1_pos;
	int (size = 64) complex_p1_val;
	int (size = 64) complex_p2_pos;
	int (size = 64) complex_p2_val;
	int (size = 64) complex_p3_pos;
	int (size = 64) complex_p3_val;
		
	int (size = 64) complex_p01;
	int (size = 64) complex_p12;
	int (size = 64) complex_p23;
	int (size = 64) complex_p02;
	int (size = 64) complex_p13;
	
	int (size = 64) complex_input1_p_pos;
	int (size = 64) complex_input1_p_val;
	int (size = 64) complex_input2_p_pos;
	int (size = 64) complex_input2_p_val;
	int (size = 64) complex_output_p;
	
	int input_state;
	int range1_i        := 0;
	int range1_counter  := 0;
	int range2_i        := 0;
	int range2_counter  := 0;
	int ra_result_index := 0;
	int rb_result_index := 0;
	
	int beam1_i           := 0;
	int beam1_counter     := 0;
	int beam2_i           := 0;
	int beam2_counter     := 0;
	int ba_result_index   := 0;
	int bb_result_index   := 0;
	//bool valid             := false;
	//bool en                := false; 
	
	int inputData_index := 0;
	float total_sum     := 0.0;
	
	
	
	// Format of the pa matrix = pa[data_index][0 = pos, 1 = val]
	List(type : List(type : int (size = 64), size = 2), size = NOF_PIXELS_KERNEL) complex_pa; 
	List(type : List(type : int (size = 64), size = 2), size = NOF_PIXELS_KERNEL) complex_pb;
	
	List(type : List(type : int (size = 64), size = 2), size = NOF_PIXELS_KERNEL) complex_ra;
	List(type : List(type : int (size = 64), size = 2), size = NOF_PIXELS_KERNEL) complex_rb;
	
	List(type : List(type : int (size = 64), size = 2), size = NOF_PIXELS_KERNEL) complex_ba;
	List(type : List(type : int (size = 64), size = 2), size = NOF_PIXELS_KERNEL) complex_bb;
/* 	
	List(type : List(type : int (size = 64), size = 2), size = NOF_PIXELS) inputData1 := [
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], 
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152],
		[4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152], [4575657222473777152, 4575657222473777152]		
	];
	
	List(type : List(type : int (size = 64), size = 2), size = NOF_PIXELS) inputData2;
	*/
	
	
	set_pa_pb : action ==>
	guard inputData_index < NOF_PIXELS
	var
		int j
	do
		j := 0;
		println("set_pa_pb - " + inputData_index);
		while j < NOF_PIXELS_KERNEL do
			complex_pa[j][0] := 1; //4575657222473777152; //inputData1[inputData_index + j][0][0];	// pos
			complex_pa[j][1] := 1; //4575657222473777152; //inputData1[inputData_index + j][1][0];	// val

			
			complex_pb[j][0] := 1; //4575657222473777152; //inputData2[inputData_index + j][0][0];	// pos
			complex_pb[j][0] := 1; //4575657222473777152; //inputData2[inputData_index + j][0][1];	// val
			
			j := j + 1;
		end
		
		//if inputData_index < NOF_PIXELS then
			inputData_index := inputData_index + NOF_PIXELS_KERNEL;
		//end
	end
	
	// The following action can be used for running the autofocus in a loop
/* 	set_pa_pb_done : action ==>
	do
		inputData_index := 0;
		total_sum       := 0.0;
	end
	*/
	
 	set_ra_rb_pos : action ==>
 	var
 		int i := 0
 	do
 		println("set_ra_rb_pos");
 		while i < 36 do
 			complex_rb[i][0] := complex_pb[i][0];	// pos
 			complex_ra[i][0] := complex_pa[i][0];	// pos
 			i        := i + 6;
 			
 			range1_i := 0;		// let the range loops run
 			range2_i := 0;
 		end
 	end
	
	/* The first for loop which calls cubic() */
 	range_int_loop_1 : action ==>
 	guard range1_i < 36
 	do
 		println("range_int_loop_1 - " + range1_i);
		complex_p0_pos := complex_pa[range1_i + range1_counter + 0][0];		
		complex_p1_pos := complex_pa[range1_i + range1_counter + 1][0];
		complex_p2_pos := complex_pa[range1_i + range1_counter + 2][0];
		complex_p3_pos := complex_pa[range1_i + range1_counter + 3][0];
		
		input_state := 1; //trigger the set_cubic_inputs action 
		
		range1_counter := range1_counter + 1;
		if range1_counter = 3 then
			range1_counter := 0;
			range1_i := range1_i + 6;
		end
 	end
 	
 	range_int_loop_1_done : action ==> do println("range_int_loop_1_done"); 
 	end
 	
 	/* The second for loop which calls cubic() */
 	range_int_loop_2 : action ==>
 	guard range2_i < 36
 	do 
 		println("range_int_loop_2 - " + range2_i);
 		complex_p0_pos := complex_pb[range2_i + range2_counter + 0][0];
		complex_p1_pos := complex_pb[range2_i + range2_counter + 1][0];
		complex_p2_pos := complex_pb[range2_i + range2_counter + 2][0];
		complex_p3_pos := complex_pb[range2_i + range2_counter + 3][0];
		
		input_state := 1; //trigger the set_cubic_inputs action
		
		range2_counter := range2_counter + 1;
		if range2_counter = 3 then
			range2_counter := 0;
			range2_i := range2_i + 6;
		end
 	end
 	
 	range_int_loop_2_done : action ==> do println("range_int_loop_2_done"); 
 	end
 	
 	/* Save the cubic ra results into ra.val */
 	store_ra_results : action ==>
 	do
 		println("store_ra_results");
 		complex_ra[ra_result_index][1] := complex_output_p;	// ra.val
 		
 		
 		if ra_result_index < 18 then 
 			ra_result_index := ra_result_index + 1;
		else
			ra_result_index := 0;
		end		
 	end
 	
  	/* Save the cubic rb results into ra.val */
 	store_rb_results : action ==>
 	do
 		println("store_rb_results");
 		complex_rb[rb_result_index][1] := complex_output_p;	// ra.val
 		
 		if rb_result_index < 18 then 
 			rb_result_index := rb_result_index + 1;
		else
			rb_result_index := 0;
		end		
 	end
 		
 	set_cubic_inputs : action ==>
 	guard input_state != 0
 	do
 		println("set_cubic_inputs");
 	// The final results will be in output_p_*
	
		if input_state = 1 then
			complex_input1_p_pos := complex_p0_pos;
			complex_input1_p_val := complex_p0_val;
			complex_input2_p_pos := complex_p1_pos;
			complex_input2_p_val := complex_p1_val;
			
			input_state := 2;
			
		else if input_state = 2 then
			// Store the output from the previous state
			complex_p01 := complex_output_p;
			
			// Set the inputs for the current state
			complex_input1_p_pos := complex_p1_pos;
			complex_input1_p_val := complex_p1_val;
			complex_input2_p_pos := complex_p2_pos;
			complex_input2_p_val := complex_p2_val;
			
			input_state := 3;
			
		else if input_state = 3 then
			// Store the output from the previous state
			complex_p12 := complex_output_p;
			
			// Set the inputs for the current state
			complex_input1_p_pos := complex_p2_pos;
			complex_input1_p_val := complex_p2_val;
			complex_input2_p_pos := complex_p3_pos;
			complex_input2_p_val := complex_p3_val;
			
			input_state := 4;
			
		else if input_state = 4 then
			// Store the output from the previous state
			complex_p23 := complex_output_p;
			
			// Set the inputs for the current state
			complex_input1_p_pos := complex_p0_pos;
			complex_input1_p_val := complex_p01;
			complex_input2_p_pos := complex_p3_pos;
			complex_input2_p_val := complex_p12;
			
			input_state := 5;
			
		else if input_state = 5 then
			// Store the output from the previous state
			complex_p02 := complex_output_p;
			
			// Set the inputs for the current state
			complex_input1_p_pos := complex_p1_pos;
			complex_input1_p_val := complex_p12;
			complex_input2_p_pos := complex_p3_pos;
			complex_input2_p_val := complex_p23;
			
			input_state := 6;
					
		else if input_state = 6 then
			// Store the output from the previous state
			complex_p13 := complex_output_p;
			
			// Set the inputs for the current state
			complex_input1_p_pos := complex_p0_pos;
			complex_input1_p_val := complex_p02;
			complex_input2_p_pos := complex_p3_pos;
			complex_input2_p_val := complex_p13;
			
			input_state := 0;
 		end
 		end
 		end
 		end
 		end
 		end
 	end
 	
 	set_cubic_inputs_done : action ==> do println("set_cubic_inputs_done"); 
 	end
 	
	_acc__cubic : action ==>
	
	/* Should be called 6 times to calculate for 1 pixel 
	 * 
	 * This action will use 12 floating-point inputs with each call.
	 * 1st call inputs : p0, p1, d0, d1
	 * 2nd call inputs : p1, p2, d1, d2
	 * 3rd call inputs : p2, p3, d2, d3
	 * 4th call inputs : p01, p12, d0, d2
	 * 5th call inputs : p12, p23, d1, d3
	 * 6th call inputs : p02, p13, d0, d3
	 * 
	 * */
	var
		int (size = 64) complex_tmp0,
		int (size = 64) complex_tmp1,
		int (size = 64) complex_tmp2,
		int (size = 64) complex_tmp3,
		int (size = 64) complex_d0,
		int (size = 64) complex_d1,
		int (size = 64) complex_x_int
	do
		println("cubic");

		complex_x_int := 1; //4575657222473777152;
		
		// calculate d
		complex_d0 := complex_x_int - complex_input1_p_pos;
		complex_d1 := complex_x_int - complex_input2_p_pos;
		
		// C_mul1 
		complex_tmp0 := complex_input1_p_val * complex_d1;
		
		// C_mul2
		complex_tmp1 := complex_input2_p_val * complex_d0;
		
		// C_sub1
		complex_tmp2 := complex_tmp0 - complex_tmp1;
		
		// C_sub2
		complex_tmp3 := complex_input1_p_pos - complex_input2_p_pos;
		
		// C_div
		complex_output_p := complex_tmp2 / complex_tmp3;
		
//		valid := en;

	end


	set_ba_bb_pos : action ==>
 	var
 		int i := 0
 	do
 		println("set_ra_rb_pos");
 		while i < 6 do
 			complex_ba[i][0] := complex_ra[i][0]; // pos
 			complex_bb[i][0] := complex_rb[i][0]; // pos
 			i                := i + 1;
 			
 			beam1_i := 0;		// let the range loops run
 			beam2_i := 0;
 		end
 	end
	
	/* The first for loop which calls cubic() */
 	beam_int_loop_1 : action ==>
 	guard beam1_i < 3
 	do
 		println("beam_int_loop_1 - " + beam1_i);
		complex_p0_pos := complex_ra[beam1_i + beam1_counter + 0][0];
		complex_p1_pos := complex_ra[beam1_i + beam1_counter + 3][0];
		complex_p2_pos := complex_ra[beam1_i + beam1_counter + 6][0];
		complex_p3_pos := complex_ra[beam1_i + beam1_counter + 9][0];
		
		input_state := 1; //trigger the set_cubic_inputs action 
		
		beam1_counter := beam1_counter + 3;
		if beam1_counter = 9 then
			beam1_counter := 0;
			beam1_i       := beam1_i + 1;
		end
 	end
 
 	beam_int_loop_1_done : action ==> do println("beam_int_loop_1_done"); 
 	end
 	
 	/* The second for loop which calls cubic() */
 	beam_int_loop_2 : action ==>
 	guard beam2_i < 3
 	do 
 		println("beam_int_loop_2 - " + beam2_i);
 		complex_p0_pos := complex_rb[beam2_i + beam2_counter + 0][0];
		complex_p1_pos := complex_rb[beam2_i + beam2_counter + 3][0];
		complex_p2_pos := complex_rb[beam2_i + beam2_counter + 6][0];
		complex_p3_pos := complex_rb[beam2_i + beam2_counter + 9][0];
		
		input_state := 1; //trigger the set_cubic_inputs action
		
		beam2_counter := beam2_counter + 3;
		if beam2_counter = 9 then
			beam2_counter := 0;
			beam2_i       := beam2_i + 1;
		end
 	end
 	
 	beam_int_loop_2_done : action ==> do println("beam_int_loop_2_done"); 
 	end
 	
 	/* Save the cubic ba results into ba.val */
 	store_ba_results : action ==>
 	do
 		println("store_ba_results - " + ba_result_index);
 		complex_ba[ba_result_index][1] := complex_output_p;	// ba.val
 		
 		ba_result_index   := ba_result_index + 3;
		if ba_result_index = 9 then
			ba_result_index := 1;
		end
		if ba_result_index = 10 then
			ba_result_index := 2;
		end
		if ba_result_index = 11 then
			ba_result_index := 0;
		end
 	end
 	
  	/* Save the cubic bb results into bb.val */
 	store_bb_results : action ==>
 	do
 		println("store_bb_results");
 		complex_bb[bb_result_index][1] := complex_output_p;	// bb.val.real
 		
		bb_result_index   := bb_result_index + 3;
		if bb_result_index = 9 then
			bb_result_index := 1;
		end
		if bb_result_index = 10 then
			bb_result_index := 2;
		end
		if bb_result_index = 11 then
			bb_result_index := 0;
		end
 	end
 		
	
	correlation : action ==>
	var
		float tmp1,
		float sum,
		int i
	do
		println("correlation");
		i   := 0;
		sum := 0.0;
		while i < 9 do
			complex_SquareRoot(complex_ba[i][1]);
			tmp1 := SquareRoot_ret;
			complex_SquareRoot(complex_bb[i][1]);
			
			sum := sum + (tmp1 * tmp1 * SquareRoot_ret * SquareRoot_ret);
			
			i := i + 1;
		end
		
		total_sum := total_sum + sum;
		println("total_sum: " + total_sum);
	end
	 
	procedure SquareRoot(float ns)
	var
		float i := 0.0,
		float x1,
		float x2,
		int j := 0
	begin
		while ((i*i) <= ns)
		do
			i := i + 0.1;
		end
		
		x1 := i;
		
		while (j < 10)
		do
			x2 := ns;
			x2 := x2 / x1;
			x2 := x2 + x1;
			x2 := x2 / 2;
			x1 := x2;
			j := j + 1;
		end   	
		SquareRoot_ret := x2;
	end
	
	procedure complex_SquareRoot(int (size = 64) ns)
	begin  	
		
	end
	 
	schedule fsm state1 :
		state1 (set_pa_pb ) 			--> state2;
		state2 (set_ra_rb_pos ) 		--> state3;
		state3 (range_int_loop_1) 		--> state4;
		state3 (range_int_loop_1_done)	--> state7;
		state4 (set_cubic_inputs)		--> state6;
		state4 (set_cubic_inputs_done)	--> state5;
		state5 (store_ra_results)		--> state3;
		state6 (_acc__cubic)					--> state4; 
		state7 (range_int_loop_2)		--> state8;
		state7 (range_int_loop_2_done)	--> state11;
		state8 (set_cubic_inputs)		--> state10;
		state8 (set_cubic_inputs_done)	--> state9;
		state9 (store_rb_results)		--> state7;
		state10 (_acc__cubic)					--> state8;
		state11 (set_ba_bb_pos)			--> state12;
		state12 (beam_int_loop_1)		--> state13;
		state12 (beam_int_loop_1_done)	--> state16;
		state13 (set_cubic_inputs)		--> state15;
		state13 (set_cubic_inputs_done)	--> state14;
		state14 (store_ba_results)		--> state12;
		state15 (_acc__cubic)					--> state13;
		state16 (beam_int_loop_2)		--> state17;
		state16 (beam_int_loop_2_done)	--> state20;
		state17 (set_cubic_inputs)		--> state19;
		state17 (set_cubic_inputs_done)	--> state18;
		state18 (store_bb_results)		--> state16;
		state19 (_acc__cubic)					--> state17;
		state20 (correlation)			--> state1;
	end
	
	
	priority
		set_cubic_inputs > set_cubic_inputs_done;
		range_int_loop_1 > range_int_loop_1_done;
		range_int_loop_2 > range_int_loop_2_done;
		set_pa_pb        > set_pa_pb_done;
	end
 end